<?xml version="1.0" encoding="UTF-8"?>

<!-- ======================================================================
     Project Common Build File

     Don't ever run the targets in this file directly. They are only meant
     to be run from build files in sub-projects that import this file.
     ====================================================================== -->
<project name="DigitalBusinessCommon" default="default" basedir=".">

	<description>
            Base build file for Digital Business Projects.
    </description>

	<property environment="env"/>
	<property file="${env.DBIZ_BUILD_PROP}/build.properties" />

	<!-- Default property values, if not found in the .properties file: -->
	<property name="library.dir.path" value="C:/EAS/dbiz/DbizLibraryWorkspace/" />
	<property name="delete.war.lib" value="false" />
	<property name="include.projects.war.lib" value="false" />
	<property name="clean.all" value="true" />
	<property name="include.server.lib" value="false" />
	<property name="run.junit" value="true" />
	<property name="junit.failure.halt" value="yes" />	
	<property name="junit.include.pattern" value="**/*Test.java" />
	<property name="selenium.failure.halt" value="no" />	
	<property name="selenium.failure.screenshot" value="yes" />
	<property name="selenium.include.pattern" value="**/*Test.java" />
	<property name="soapui.failure.halt" value="no" />	
	<property name="soapui.include.pattern" value="**/*Test.java" />
	
	<!-- Script property values: -->
	<property name="library.dir" value="${library.dir.path}/DigitalBusinessLibrary/vendor" />
	<property name="src.root.dir" value="${basedir}/src" />
	<property name="src.dir" value="${basedir}/src/main/java" />
	<property name="test.dir" value="${basedir}/src/test/java" />
	<property name="resources.dir" value="${basedir}/src/main/resources" />
	<property name="target.dir" value="${basedir}/target" />
	<property name="tmp.dir" value="${target.dir}/tmp" />
	<property name="junit.target.dir" value="${basedir}/target-junit" />
	<property name="junit.log.dir" value="${junit.target.dir}/junit-log" />
	<property name="junit.reports.dir" value="${junit.target.dir}/junit-reports" />
	<property name="selenium.dir" value="${basedir}/src/test/selenium" />	
	<property name="selenium.target.dir" value="${basedir}/target-selenium" />
	<property name="selenium.log.dir" value="${selenium.target.dir}/selenium-log" />	
	<property name="selenium.reports.dir" value="${selenium.target.dir}/selenium-reports" />
	<property name="soapui.dir" value="${basedir}/src/test/soapui" />	
	<property name="soapui.target.dir" value="${basedir}/target-soapui" />
	<property name="soapui.log.dir" value="${soapui.target.dir}/soapui-log" />	
	<property name="soapui.reports.dir" value="${soapui.target.dir}/soapui-reports" />	
	<property name="ant.library.dir" value="${ant.home}/lib" />
	<property name="needsBuilding" value="true" />
	<property name="build.resources.dir" value="${basedir}/build-resources" />

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${library.dir}/ant/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<!-- JUnit Dependency path -->
	<path id="junit.dependency.path">
		<fileset dir="${library.dir}/junit">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${tmp.dir}" />
	</path>
	
	<!-- Selenium Dependency path -->
	<path id="selenium.dependency.path">
		<fileset dir="${library.dir}/selenium3">
			<include name="**/*.jar" />
		</fileset>	
		<pathelement location="${tmp.dir}" />
	</path>	
	
	<!-- SOAP UI 4.6.4 Dependency path -->
	<path id="soapui.dependency.path">
		<fileset dir="${library.dir}/soap-ui">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${tmp.dir}" />
	</path>		

	<!-- Server Libraries to be used across all projects when compiling.  
	     These jars typically reside on the server and will NOT be included in the final project build 
	-->
	<path id="server-dependency.path">
		<fileset dir="${library.dir}/ibm8_5" includes="**/*.jar" excludes="**/j2ee.jar" />
	</path>

	<!-- Subprojects will need to set this. These libraries will be used at compile time and NOT included in the final project build -->
	<path id="application-dependency.path" />

	<!-- Subprojects will need to set this. These libraries will be used at compile time and WILL be included in the final WAR build -->
	<path id="war-dependency.path" />
	
	<!-- Subprojects will need to set this. These libraries will be used at compile time and MAY be included in the final WAR build if set in .properties -->
	<path id="war-projects-dependency.path" />	

	<!-- Subprojects will need to set this. These libraries will be used at compile time and WILL be included in the final EAR build -->
	<path id="ear-dependency.path" />

	<!-- Subprojects will need to set this. These libraries will be used at compile time and WILL be included in the final EAR build -->
	<path id="ear-projects-dependency.path" />	
	
	<target name="default" description="Does nothing" />

	<target name="clean" depends="deldirs" description="Cleans the current project." />

	<target name="deldirs" description="Deletes all temporary output directories for the build">
		<delete dir="${target.dir}" />
		<delete dir="${junit.target.dir}" />
		<delete dir="${selenium.target.dir}" />
		<delete dir="${soapui.target.dir}" />
	</target>

	<target name="mkdirs" description="Makes all directories required for the build. No need to run this directly. Runs before every compile.">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${junit.target.dir}" />
		<mkdir dir="${junit.log.dir}" />		
		<mkdir dir="${tmp.dir}" />
	</target>

	<target name="checkIfBuildIsNeeded">	
		
		<condition property="src.uptodate">
			<and>	
				<available file="${src.dir}" type="dir"/>
				<available file="${test.dir}" type="dir"/>
				<uptodate>
					<srcfiles dir="${src.dir}" includes="**/*.java" />
					<srcfiles dir="${test.dir}" includes="**/*.java" />
					<mapper to="${tmp.dir}/*.class" type="glob" from="*.java" />
				</uptodate>
			</and>
		</condition>
		
		<condition property="src.exists">
			<and>				
				<available file="${src.dir}" type="dir"/>
				<available file="${test.dir}" type="dir"/>
			</and>
		</condition>		
		
	</target>

	<target name="compile" depends="init, mkdirs, checkIfBuildIsNeeded" if="src.exists" unless="src.uptodate" description="Compiles all source files for the current project.">
		<!-- Compile Main Source -->
		<javac destdir="${tmp.dir}" debug="on" memorymaximumsize="256m" fork="true" includeantruntime="false">
			<src path="${src.dir}" />	
			<classpath refid="server-dependency.path" />
			<classpath refid="application-dependency.path" />
			<classpath refid="war-dependency.path" />
			<classpath refid="war-projects-dependency.path" />
			<classpath refid="ear-dependency.path" />
		</javac>
		<copy todir="${tmp.dir}">
			<fileset dir="${src.dir}" includes="**/*.class,**/*.index,**/*.xml" excludes="**/*.txt" />
			<fileset dir="${resources.dir}" excludes="**/*.txt" />
		</copy>

		<!-- Compile JUnit Test Source -->
		<javac destdir="${junit.target.dir}" debug="on" memorymaximumsize="256m" fork="true" includeantruntime="false">
			<src path="${test.dir}" />
			<classpath>
				<path refid="junit.dependency.path" />
			</classpath>
			<classpath refid="server-dependency.path" />
			<classpath refid="application-dependency.path" />
			<classpath refid="war-dependency.path" />
			<classpath refid="war-projects-dependency.path" />
			<classpath refid="ear-dependency.path" />
		</javac>
		<copy todir="${junit.target.dir}">
			<fileset dir="${test.dir}" includes="**/*.class,**/*.xml" excludes="**/*.txt" />
			<fileset dir="${resources.dir}" excludes="**/*.txt" />
		</copy>
		
		<!-- Compile Selenium Test Source (if exists) -->
		<if>
			<available file="${selenium.dir}" type="dir"/>
			<then>
				
				<mkdir dir="${selenium.target.dir}" />
				<mkdir dir="${selenium.log.dir}" />
				<mkdir dir="${selenium.reports.dir}" />
				
				<javac destdir="${selenium.target.dir}" debug="on" memorymaximumsize="256m" fork="true" includeantruntime="false">
					<src path="${selenium.dir}" />
					<classpath>
						<path refid="junit.dependency.path" />
						<path refid="selenium.dependency.path" />
					</classpath>
					<classpath refid="server-dependency.path" />
					<classpath refid="application-dependency.path" />
					<classpath refid="war-dependency.path" />
					<classpath refid="war-projects-dependency.path" />
					<classpath refid="ear-dependency.path" />
				</javac>
				<copy todir="${selenium.target.dir}">
					<fileset dir="${selenium.dir}" includes="**/*.class,**/*.xml" excludes="**/*.txt" />
					<fileset dir="${resources.dir}" excludes="**/*.txt" />
				</copy>	
			</then>
		</if>
		
		<!-- Compile SOAP UI Test Source (if exists) -->
		<if>
			<available file="${soapui.dir}" type="dir"/>
			<then>
				
				<mkdir dir="${soapui.target.dir}" />
				<mkdir dir="${soapui.log.dir}" />
				<mkdir dir="${soapui.reports.dir}" />
				
				<javac destdir="${soapui.target.dir}" debug="on" memorymaximumsize="256m" fork="true" includeantruntime="false">
					<src path="${soapui.dir}" />
					<classpath>
						<path refid="junit.dependency.path" />
						<path refid="soapui.dependency.path" />
					</classpath>
					<classpath refid="server-dependency.path" />
					<classpath refid="application-dependency.path" />
					<classpath refid="war-dependency.path" />
					<classpath refid="war-projects-dependency.path" />
					<classpath refid="ear-dependency.path" />
				</javac>
				<copy todir="${soapui.target.dir}">
					<fileset dir="${soapui.dir}" includes="**/*.class,**/*.xml" excludes="**/*.txt" />
					<fileset dir="${resources.dir}" excludes="**/*.txt" />
				</copy>	
			</then>
		</if>		
	</target>

	<!-- Task to Run JUnit tests for current project -->
	<target name="run-junit" depends="compile">
		<junit printsummary="yes" haltonfailure="${junit.failure.halt}" fork="yes">
			<classpath refid="junit.dependency.path" />
			<classpath>
				<pathelement location="${junit.target.dir}" />
			</classpath>
			<classpath refid="application-dependency.path" />
			<classpath refid="server-dependency.path" />
			<classpath refid="war-dependency.path" />
			<classpath refid="war-projects-dependency.path" />
			<classpath refid="ear-dependency.path" />			
			<formatter type="plain" />
			<formatter type="xml" />
			<batchtest fork="yes" todir="${junit.log.dir}">
				<fileset dir="${test.dir}">
					<include name="${junit.include.pattern}" />
				</fileset>
			</batchtest>
			
			<sysproperty key="test.env" value="${test.env}"/>
		</junit>
		<!-- Commented out until can be resolved as part of WAS8 Migration
		<junitreport todir="${junit.log.dir}">
			<fileset dir="${junit.log.dir}">
				<include name="TEST*.xml"/>
			</fileset>
			<report format="frames" todir="${junit.reports.dir}"/>
		</junitreport>	
		-->	
	</target>
	
	<!-- Task to Run Selenium tests for specified Selenium Environment (see 'run-selenium-ut') -->
	<target name="run-selenium" depends="clean, compile">
		<junit printsummary="yes" haltonfailure="${selenium.failure.halt}" fork="yes">
			<classpath refid="junit.dependency.path" />
			<classpath refid="selenium.dependency.path" />
			<classpath>
				<pathelement location="${junit.target.dir}" />
				<pathelement location="${selenium.target.dir}" />
			</classpath>
			<classpath refid="application-dependency.path" />
			<classpath refid="server-dependency.path" />
			<classpath refid="war-dependency.path" />
			<classpath refid="war-projects-dependency.path" />
			<classpath refid="ear-dependency.path" />			
			<formatter type="plain" />
			<formatter type="xml" />
			
			<batchtest fork="yes" todir="${selenium.log.dir}">
				<fileset dir="${selenium.dir}">
					<include name="${selenium.include.pattern}" />
				</fileset>
			</batchtest>
			
			<sysproperty key="selenium.env" value="${selenium.env}"/>
			<sysproperty key="webdriver.chrome.driver" value="${library.dir}/selenium3/chromedriver-2.2.7.exe"/>
			<sysproperty key="selenium.failure.screenshot" value="${selenium.failure.screenshot}"/>
		</junit>
		<!-- TEMP COMMENT OUT - WAS8 MIGRATION TODO 
		<junitreport todir="${selenium.log.dir}">
			<fileset dir="${selenium.log.dir}">
				<include name="TEST*.xml"/>
			</fileset>
			<report format="frames" todir="${selenium.reports.dir}"/>
		</junitreport>		
		-->
	</target>		

	<!-- Run Selenium Tests in UT -->
	<target name="run-selenium-ut">
		<antcall target="run-selenium">
			<param name="selenium.env" value="ut"/>	
		</antcall>
	</target>
						
	<!-- Run Selenium Tests in IT -->
	<target name="run-selenium-it">
		<antcall target="run-selenium">
			<param name="selenium.env" value="it"/>	
		</antcall>
	</target>
	
	<!-- Run Selenium Tests in ST -->
	<target name="run-selenium-st">
		<antcall target="run-selenium">
			<param name="selenium.env" value="st"/>	
		</antcall>
	</target>
	
	<!-- Run Selenium Tests in PS -->
	<target name="run-selenium-ps">
		<antcall target="run-selenium">
			<param name="selenium.env" value="ps"/>	
		</antcall>
	</target>
	
	<!-- Run Selenium Tests in PROD -->
	<target name="run-selenium-prod">
		<antcall target="run-selenium">
			<param name="selenium.env" value="prod"/>	
		</antcall>
	</target>	
	
	<!-- Task to Run SOAP UI tests for specified Environment (see 'run-soapui-ut') -->
	<target name="run-soapui" depends="clean, compile">
		<junit printsummary="yes" haltonfailure="${soapui.failure.halt}" fork="yes">
			<classpath refid="junit.dependency.path" />
			<classpath refid="soapui.dependency.path" />
			<classpath>
				<pathelement location="${junit.target.dir}" />
				<pathelement location="${soapui.target.dir}" />
			</classpath>
			<classpath refid="application-dependency.path" />
			<classpath refid="server-dependency.path" />
			<classpath refid="war-dependency.path" />
			<classpath refid="war-projects-dependency.path" />
			<classpath refid="ear-dependency.path" />			
			<formatter type="plain" />
			<formatter type="xml" />
			
			<batchtest fork="yes" todir="${soapui.log.dir}">
				<fileset dir="${soapui.dir}">
					<include name="${soapui.include.pattern}" />
				</fileset>
			</batchtest>
			
			<sysproperty key="soapui.env" value="${soapui.env}"/>
		</junit>
		<junitreport todir="${soapui.log.dir}">
			<fileset dir="${soapui.log.dir}">
				<include name="TEST*.xml"/>
			</fileset>
			<report format="frames" todir="${soapui.reports.dir}"/>
		</junitreport>		
	</target>	
	
	<!-- Run SoapUI Tests in UT -->
	<target name="run-soapui-ut">
		<antcall target="run-soapui">
			<param name="soapui.env" value="UT"/>	
		</antcall>
	</target>	
	
	<!-- Run SoapUI Tests in IT -->
	<target name="run-soapui-it">
		<antcall target="run-soapui">
			<param name="soapui.env" value="IT"/>	
		</antcall>
	</target>	
		
	<!-- Run SoapUI Tests in ST -->
	<target name="run-soapui-st">
		<antcall target="run-soapui">
			<param name="soapui.env" value="ST"/>	
		</antcall>
	</target>	
		
	<!-- Run SoapUI Tests in PS -->
	<target name="run-soapui-ps">
		<antcall target="run-soapui">
			<param name="soapui.env" value="PS"/>	
		</antcall>
	</target>	
	
	<!-- Run SoapUI Tests in PROD -->
	<target name="run-soapui-prod">
		<antcall target="run-soapui">
			<param name="soapui.env" value="PROD"/>	
		</antcall>
	</target>		

	<target name="checkIfJarIsNeeded">
		<uptodate property="jar.uptodate" targetfile="${target.dir}/${dist.jar}">
			<srcfiles dir="${src.root.dir}" />
		</uptodate>
	</target>

	<target name="build" depends="compile, checkIfJarIsNeeded" unless="jar.uptodate" description="Builds the distribution file (jar) for the current project. Performs a compile if necessary.">
		<delete file="${target.dir}/${dist.jar}" />
		<tstamp>
			<format property="timestamp1" pattern="MM/dd/yyyy hh:mm:ss" />
		</tstamp>

		<echo message="Starting jar ${dist.jar} at ${timestamp1}" />

		<if>
			<available file="${tmp.dir}/META-INF/MANIFEST.MF" />
			<then>
				<echo message="MANIFEST available.  Using existing META-INF/MANIFEST.MF file." />
				<jar destfile="${target.dir}/${dist.jar}" whenmanifestonly="skip" manifest="${tmp.dir}/META-INF/MANIFEST.MF">
					<fileset dir="${tmp.dir}">
						<exclude name="**/*.txt" />
					</fileset>
				</jar>
			</then>
			<else>
				<jar destfile="${target.dir}/${dist.jar}" whenmanifestonly="skip">
					<fileset dir="${tmp.dir}">
						<exclude name="**/*.txt" />
					</fileset>
				</jar>
			</else>
		</if>

		<tstamp>
			<format property="timestamp2" pattern="MM/dd/yyyy hh:mm:ss" />
		</tstamp>
		<echo message="Finished jar ${dist.jar} at ${timestamp2}" />
		
		<if>
			<equals arg1="${run.junit}" arg2="true" />
			<then>
				<echo message="Executing JUnit tests at ${timestamp2}" />
				<antcall target="run-junit" />
			</then>
		</if>	
		
	</target>

	<target name="build-jars" depends="build" description="Creates all jars for the project" />

	<target name="clean-all" description="Cleans all projects by calling clean on each individual build file.">
		<if>
			<equals arg1="${clean.all}" arg2="true" />
			<then>
				<echo message="Cleaning all projects now..." />
				<subant target="clean">
					<fileset dir="${basedir}/../" includes="**/build.xml" />
				</subant>
			</then>
			<else>
				<echo message="Clean-All is disabled in build.properties, skipping..." />
			</else>
		</if>		
	</target>

	<target name="compile-all" description="Compiles all projects.">
		<subant target="compile">
			<fileset dir="${basedir}/../" includes="**/build.xml" />
		</subant>
	</target>

	<target name="build-all" description="Builds all projects.">
		<subant target="build">
			<fileset dir="${basedir}/../" includes="**/build.xml" />
		</subant>
	</target>

	<!-- The following targets can be overriden by subprojects -->
	<target name="init" description="Subprojects must override this to implement any behavior that needs to happen before compile." />
</project>
