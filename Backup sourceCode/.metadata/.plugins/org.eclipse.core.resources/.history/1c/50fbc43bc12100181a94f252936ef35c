package com.chubb.dgmk.caf.wsc.accessors;


import org.apache.commons.lang.StringUtils;

import com.chubb.dgmk.caf.domain.model.UserInformation;
import com.chubb.dgmk.caf.logger.CAFLogger;
import com.chubb.dgmk.caf.util.CAFPropertiesUtil;
import com.chubb.dgmk.caf.util.ICAFConstants;

import ei.user.profile.GetUserProfileReply;
import ei.user.profile.GetUserProfileRequest;
import ei.user.profile.User;
import ei.user.profile.UserProfile;
import ei.user.profile.UserProfileIdentifier;
import ei.user.profile_retrieval_crp31X1x1_http.UserProfileRetrievalCRP31X1HTTP_UserProfileRetrievalCRP31X1HttpPortProxy;

/**
 * <pre>
 * UserProfileRetrievalAccessor
 * UserProfileRetrievalAccessor class is responsible for retrieving User Profile
 *
 * </pre> 
 */
public class UserProfileRetrievalAccessor {

	/**
	 * <pre>
	 * getEndpoint
	 * 
	 * This method is used to get user profile service end point URL which loaded at the time of application initialization
	 * 
	 * @return the endPoint for the UserProfile service from
	 * the properties file.
	 * 
	 * </pre>
	 */
	public String getEndpoint() {

		String endpoint = CAFPropertiesUtil.getUserProfileRetrievalEndpoint();
		CAFLogger.logInfo("Endpoint returned for UserProfileRetriever: " + endpoint, "UserProfileRetrievalAccessor", "getEndpoint");

		return endpoint;
	}

	/**
	 * <pre>
	 * getUserInformation
	 * 
	 * This method will call the ICC provider service and will get
	 * the list of products from it
	 * 
	 * @return the list of AtChubb products
	 * 
	 * </pre>
	 */
	public User getUserInformation(UserInformation userProfile) throws Exception {

		String endpoint = getEndpoint();

		User userInfo=null;
		//call the service
		Thread.currentThread().setContextClassLoader(getClass().getClassLoader());

		UserProfileRetrievalCRP31X1HTTP_UserProfileRetrievalCRP31X1HttpPortProxy proxy = new UserProfileRetrievalCRP31X1HTTP_UserProfileRetrievalCRP31X1HttpPortProxy();
		proxy._getDescriptor().setEndpoint(endpoint);

		try {
			GetUserProfileRequest providerRequest = buildRequest(userProfile);
			
			GetUserProfileReply reply = proxy.getUserProfile(providerRequest);
			if (reply!=null)
			CAFLogger.logFine("User Profile Retrieved :" + reply.toString(), endpoint, endpoint );
			//build the domain object from the service reply
			userInfo=getDomainObjectFromReply(reply);
		
		}catch (Exception e) {
			String msg = "Exception occurred calling UserProfileRetrieverHttp: " + e;
			CAFLogger.logSevere(msg, "UserProfileRetrieverAccessor", "getAtChubbUserProfile");
			e.printStackTrace();
			throw e;

		}
		return userInfo;

	}

	private User getDomainObjectFromReply(GetUserProfileReply reply) {
		// TODO Auto-generated method stub
		User userInfo=null;
		if(null != reply){
			
			UserProfile profile=reply.getUserProfile();
			userInfo = profile.getUser();
		}
		
		return userInfo;
	}

	/**
	 * <pre>
	 * buildRequest
	 * 
	 * Create instance of GetUserProfileRequest from ObjectFactory
	 * @return the GetUserProfileRequest Object
	 *  
	 * </pre>
	 */
	private GetUserProfileRequest buildRequest(UserInformation userProfile) throws Exception {

		GetUserProfileRequest request =new GetUserProfileRequest();
		UserProfileIdentifier userProfileIdentifier=new UserProfileIdentifier();
		if(StringUtils.isNotBlank(userProfile.getExternalUserId()) )
		userProfileIdentifier.setExternalUserId(userProfile.getExternalUserId());
		if(StringUtils.isNotBlank(userProfile.getUserid())
			request.setUserId(userProfile.getUserid());
		request.setUserProfileIdentifier(userProfileIdentifier);
		request.setDataSourceOptionsText(ICAFConstants.DATA_SOURCE_OPTIONS_TEXT_GET_ACCESS_ONLY);
		
		CAFLogger.logInfo("Request object ", "UserProfileRetrievalAccessor", "buildRequest is "+request.toString());
		return request;

	}

}